{"version":3,"sources":["serviceWorker.js","public/js/Common.js","components/IsdM.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","common","url","img_url","Common","net_url","HardInfoChildImgComponent","props","children","label","Fragment","Typography","variant","style","display","undefined","fontWeight","marginLeft","backgroundImage","name","backgroundRepeat","backgroundSize","width","height","backgroundPosition","cursor","margin","onClick","open","textAlign","lineHeight","title","HardInfoChildTxtComponent","obj","split","map","ele","index","key","HardInfoChildTabsComponent","tabsArr","React","useState","value","setValue","TabPanel","tabProp","background","role","hidden","id","Object","keys","item","classes","makeStyles","theme","root","flexGrow","backgroundColor","tabs","borderRight","palette","divider","useStyles","Array","child","push","values","className","Tabs","onChange","event","newValue","aria-label","orientation","tab","Tab","HardInfoPopover","hardId","labelCategory","basicInfo","wiringInstructions","TypicalLinks","factoryJpackParse","Jpack","resJpack","jpackBasicInfoArr","jpackTypicalLinksArr","jpackWiringInstructionsArr","includes","BasicInfoComponent","marginTop","fontSize","alignItems","paddingLeft","WiringInstructionsComponent","StyledTableCell","withStyles","head","color","body","TableCell","StyledTableRow","action","hover","TableRow","class","maxWidth","TableContainer","Table","size","TableHead","align","TableBody","splice","length","rows","rowIndex","row","TypicalLinksComponent","resArr","parseTypicalLinksJpack","minWidth","overflow","justifyContent","Divider","withRouter","data","setData","history","pathname","useEffect","fetchIdMaps","Axios","method","Headers","then","res","code","note","content","JSON","parse","App","path","component","Isd","from","to","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8570b0da.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst common = {}\r\n\r\ncommon.base_url = (url) => 'http://192.168.50.80:9001'+url;\r\ncommon.net_url = (url) => 'https://www.langjie.com'+url;\r\n\r\nexport default common","import React, { useEffect, useState } from 'react';\r\nimport { \r\n    Typography, \r\n    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,   \r\n    Tabs, Tab,\r\n    IconButton, \r\n    Divider,\r\n    Fade, } from '@material-ui/core';\r\nimport { Close as CloseIcon } from '@material-ui/icons'\r\nimport Common from '../public/js/Common';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport Axios from 'axios';\r\nconst img_url = (url) => Common.net_url(`/img/gallery/`+url)\r\n\r\n/**\r\n * 硬件接口说明弹窗\r\n */\r\n\r\n//硬件接口说明弹窗子图片组件\r\n\r\nfunction HardInfoChildImgComponent(props) {\r\n    const { children, label } = props\r\n    return(\r\n        <React.Fragment>\r\n            <Typography variant=\"subtitle2\" style={{display: label === undefined ? \"none\": \"block\", fontWeight: \"bold\", marginLeft: 30}}>{label}：</Typography>\r\n            <div style={{\r\n                backgroundImage: \"url('\"+img_url(children.name)+\"')\",\r\n                backgroundRepeat: \"no-repeat\", \r\n                backgroundSize: \"contain\", \r\n                width: children.width, \r\n                height: children.height, \r\n                backgroundPosition: \"center\", \r\n                cursor: \"pointer\", \r\n                margin: \"auto\"}}\r\n                onClick={() => window.open(`${img_url(`${children.name}`)}`)}\r\n                ></div>\r\n                \r\n                <div style={{textAlign: \"center\", lineHeight: 2}}>\r\n                    <span>{children.title}</span></div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n//硬件接口说明弹窗子文字组件\r\nfunction HardInfoChildTxtComponent(props) {\r\n    const { children, label } = props\r\n    let obj= {}\r\n    obj.name = typeof children === \"string\" ? children.split() : children.name\r\n    \r\n    return(\r\n        <div>\r\n            <div style={{marginLeft: 30}}>\r\n                <Typography variant=\"subtitle2\" style={{fontWeight: \"bold\"}}>{label}：</Typography>\r\n                <div style={{marginLeft: 70}}>{obj['name'].map((ele, index) => (\r\n                    <Typography variant=\"subtitle2\" key={ele+index}>{index+1+\"、\"+ele}</Typography>\r\n                ))}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n//硬件接口说明弹窗子tabs组件\r\nfunction HardInfoChildTabsComponent(props) {\r\n    const { children } = props\r\n    const tabsArr = []\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const TabPanel = (tabProp) => {\r\n        const { children, index, value } = tabProp;\r\n        return(\r\n            <div\r\n            style={{background: \"#fff\", width: \"90%\"}}\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            >\r\n                {value === index && Object.keys(children).map((item, index) => (\r\n                    children[item]['class'] === \"picture\" ?\r\n                    <HardInfoChildImgComponent key={index} label={item}>{children[item]}</HardInfoChildImgComponent> :\r\n                    <HardInfoChildTxtComponent key={index} label={item}>{children[item]}</HardInfoChildTxtComponent>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            flexGrow: 1,\r\n            backgroundColor: \"#f7f7f7\",\r\n            display: 'flex',\r\n            height: 224,\r\n        },\r\n        tabs: {\r\n            borderRight: `1px solid ${theme.palette.divider}`,\r\n            width: 180\r\n        },\r\n    }));\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    const classes = useStyles()\r\n    if(children instanceof Array) {\r\n        children.map(child => {\r\n            tabsArr.push(Object.values(child)[0]['title'])\r\n        })\r\n        return(\r\n        <div style={{margin: \"12px 0\"}}>\r\n            <div className={classes.root}>\r\n                <Tabs \r\n                value={value} \r\n                onChange={handleChange}\r\n                variant=\"scrollable\" \r\n                aria-label=\"ant example\"\r\n                orientation=\"vertical\"\r\n                className={classes.tabs}\r\n                >\r\n                {tabsArr.map((tab, index) => (\r\n                    <Tab key={index} label={tab} />\r\n                ))}\r\n                </Tabs>\r\n                {children.map((child, index) => (\r\n                    <TabPanel key={index} index={index} value={value}>{child}</TabPanel>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n    }else{        \r\n        return(\r\n            <div>{Object.keys(children).map((item, index) => (\r\n                children[item]['class'] === \"picture\" ?\r\n                    <HardInfoChildImgComponent key={index} label={item}>{children[item]}</HardInfoChildImgComponent> :\r\n                    <HardInfoChildTxtComponent key={index} label={item}>{children[item]}</HardInfoChildTxtComponent>\r\n            ))}</div>\r\n        )\r\n    }\r\n    \r\n    \r\n}\r\n\r\nfunction HardInfoPopover(props){\r\n    const { children, hardId} = props;\r\n    const labelCategory = {\r\n        basicInfo: ['英文名称','中文名称','符号图'],\r\n        wiringInstructions: ['接线详图','接线表格'],\r\n        TypicalLinks: ['典型连接']\r\n    };\r\n\r\n    \r\n    const factoryJpackParse = function (Jpack){\r\n        const resJpack = {\r\n            jpackBasicInfoArr: [],\r\n            jpackTypicalLinksArr: [],\r\n            jpackWiringInstructionsArr: []\r\n        }\r\n        for (const key in Jpack) {\r\n            if(labelCategory.basicInfo.includes(key)) {\r\n                resJpack.jpackBasicInfoArr.push(Jpack[key])\r\n            }else if(labelCategory.TypicalLinks.includes(key)) {\r\n                resJpack.jpackTypicalLinksArr.push(Jpack[key])\r\n            }else if(labelCategory.wiringInstructions.includes(key)) {\r\n                resJpack.jpackWiringInstructionsArr.push(Jpack[key])\r\n            }\r\n        }\r\n        return resJpack\r\n    }\r\n\r\n    //basicInfo 组件\r\n    const BasicInfoComponent = (props) => {\r\n        const { children } = props\r\n        return(\r\n            <div>\r\n                <div style={{marginTop: \"20px\"}}><span style={{fontSize: 16}}>【基本信息】</span></div>\r\n                <div style={{display: \"flex\", alignItems: \"center\", margin: \"0 32px\"}}>{children.map((child, index) => (\r\n                    typeof child === \"string\" ?\r\n                    index === 0 ? <Typography key={index}>{child}</Typography> :\r\n                    <Typography key={index}>（{child}）</Typography> : \r\n                    <div key={index} style={{paddingLeft: 40}}>\r\n                        <HardInfoChildImgComponent>{child}</HardInfoChildImgComponent>\r\n                    </div>\r\n                ))}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //接线详情组件\r\n    const WiringInstructionsComponent = (props) => {\r\n        const { children } = props;\r\n\r\n        const StyledTableCell = withStyles((theme) => ({\r\n            head: {\r\n              backgroundColor: \"#3f51b5\",\r\n              color: \"#fff\",\r\n            },\r\n            body: {\r\n              fontSize: 12,\r\n            },\r\n          }))(TableCell);\r\n        \r\n          const StyledTableRow = withStyles((theme) => ({\r\n            root: {\r\n              '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n              },\r\n            },\r\n          }))(TableRow);\r\n\r\n        return(\r\n            <div>\r\n                <div><span style={{fontSize: 16}}>【接线说明】</span></div>\r\n                <div>{children.map((child, index) => (\r\n                    child.class === \"picture\" ?\r\n                    <div key={index}>\r\n                        <HardInfoChildImgComponent >{child}</HardInfoChildImgComponent>\r\n                    </div> :\r\n                    <div key={index} style={{width: \"86%\", margin: \"20px auto\", maxWidth: 600}}><TableContainer>\r\n                    <Table size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {child.name[0].map((title, index) => (\r\n                                    <StyledTableCell key={index+title} align=\"center\"><div>{title}</div></StyledTableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {child.name.splice(1,child.name.length - 1).map((rows, rowIndex) => (\r\n                                <StyledTableRow key={rows}>{rows.map((row, index) =>(\r\n                                    <StyledTableCell key={row+index} align=\"center\">{row}</StyledTableCell>\r\n                                ))}</StyledTableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer></div>\r\n                ))}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //典型连接\r\n    const TypicalLinksComponent = (props) => {\r\n        const { children } = props;\r\n        if(children.length === 0) return null\r\n\r\n        const parseTypicalLinksJpack = (children) => {\r\n            const resArr = []\r\n            for(let key in children) {\r\n                if(children[key] instanceof Array) {\r\n                    const tabsArr = []\r\n                    children[key].map((child, index) => {\r\n                        tabsArr.push(<HardInfoChildTabsComponent key={key+index}>{child}</HardInfoChildTabsComponent>)\r\n                    })\r\n                    resArr.push(tabsArr) \r\n                }else {\r\n                    if(children[key][\"class\"] === \"picture\") {\r\n                        resArr.push(<HardInfoChildImgComponent key={key} label={key}>{children[key]}</HardInfoChildImgComponent>)\r\n                    }else{\r\n                        resArr.push(<HardInfoChildTxtComponent key={key} label={key}>{children[key]}</HardInfoChildTxtComponent>)\r\n                    }\r\n                }\r\n            }\r\n            return resArr\r\n        }\r\n        \r\n        \r\n        return(\r\n            <div>\r\n                <div style={{marginTop: 20}}><span style={{fontSize: 16}}>【典型连接】</span></div>\r\n                <div>{parseTypicalLinksJpack(children[0])}</div>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div style={{minWidth: 280}}>\r\n            <div>\r\n                <div style={{width: \"97vw\", height: \"95vh\", margin: 'auto', overflow: \"auto\"}}>\r\n                    <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\"}}>\r\n                        <Typography variant=\"h6\" style={{margin: \"0 20px\"}}>{hardId}说明文档</Typography>\r\n                    </div>\r\n                    <Divider orientation=\"horizontal\" />\r\n                    <div style={{display: \"flex\"}}>\r\n                        <div style={{width: \"50%\", borderRight: \"#ddd 1px solid\", margin: \"0 20px\"}}>\r\n                            <BasicInfoComponent>{factoryJpackParse(children).jpackBasicInfoArr}</BasicInfoComponent>\r\n                            <WiringInstructionsComponent>{factoryJpackParse(children).jpackWiringInstructionsArr}</WiringInstructionsComponent>\r\n                        </div>\r\n                        <div style={{width: \"50%\", margin: \"0 20px\"}}>\r\n                            <TypicalLinksComponent>{factoryJpackParse(children).jpackTypicalLinksArr}</TypicalLinksComponent>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Isd = props => {\r\n    const [data, setData] = useState([])\r\n    const res = []\r\n    const hardId = props.history.location.pathname.split('/')[props.history.location.pathname.split('/').length - 1]\r\n    useEffect(() => {\r\n        const fetchIdMaps = {\r\n            \"DBF25\": 114,\r\n            \"DBM25\": 115,\r\n            \"DBF9\": 112,\r\n            \"DBM9\": 113,\r\n            \"CX16-9\": 117,\r\n            \"Y21-5\": 116,\r\n            \"GX20-8\": 121,\r\n            \"GX16-7\": 120,\r\n            \"GX16-6\": 119,\r\n            \"GX16-4\": 118\r\n        }\r\n        \r\n        const fetch = () => {\r\n            Axios({\r\n                method: \"GET\",\r\n                url: Common.net_url(`/open/knowledge/${fetchIdMaps[hardId]}`),\r\n                Headers: {\r\n                    'Content-Type':'application/json'\r\n                }\r\n            }).then(res => {\r\n                if(res.data.code === 200) {\r\n                    let note = res.data.data[0].content['说明']\r\n                    note = typeof note === \"object\" ? note : JSON.parse(note)\r\n                    setData(note)\r\n                }\r\n            })\r\n        }\r\n\r\n        fetch()\r\n        \r\n    }, [hardId])\r\n\r\n\r\n    return(\r\n        <HardInfoPopover hardId={hardId}>{data}</HardInfoPopover>\r\n    )\r\n}\r\n\r\nexport default withRouter(Isd)","import React from 'react';\r\nimport { Route, Switch, Redirect, HashRouter } from 'react-router-dom';\r\nimport Isd from './IsdM';\r\n\r\n\r\n\r\nexport default class App extends React.Component {\r\n\r\n    render () {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/*\" component={Isd} />\r\n                <Redirect from=\"/\" to=\"/\" />\r\n            </Switch>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport './public/css/App.css';\nimport './public/css/Layout.css';\nimport App from './components/App';\nReactDOM.render(\n    <HashRouter>\n        <App/>\n    </HashRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}